var search_data = {"index":{"searchIndex":["clockify","days","gui","object","outputpdf","outputxlsx","budgets()","change_year()","client_id()","client_list()","client_names()","current_week()","current_year()","custom_range()","default_range()","detailed_report()","get_days()","get_days_from_week()","get_report()","get_report()","launch()","new()","new()","new()","new()","output()","output()","prior_weekday()","set_client()","set_client()","set_client()","yesterday()","gemfile","gemfile.lock","readme","executable","history"],"longSearchIndex":["clockify","days","gui","object","outputpdf","outputxlsx","outputpdf#budgets()","outputpdf#change_year()","clockify#client_id()","clockify#client_list()","clockify#client_names()","outputxlsx#current_week()","outputxlsx#current_year()","outputxlsx#custom_range()","outputxlsx#default_range()","clockify#detailed_report()","days::get_days()","days::get_days_from_week()","outputpdf#get_report()","outputxlsx#get_report()","gui#launch()","clockify::new()","gui::new()","outputpdf::new()","outputxlsx::new()","outputpdf#output()","outputxlsx#output()","days::prior_weekday()","clockify#set_client()","outputpdf#set_client()","outputxlsx#set_client()","days::yesterday()","","","","",""],"info":[["Clockify","","Clockify.html","","<p>This class represents the Clockify API, and has both the base and report endpoints built in.\n"],["Days","","Days.html","","<p>Provides helper functions to find previous dates.\n"],["Gui","","Gui.html","","<p>Top level GUI class\n"],["Object","","Object.html","",""],["OutputPdf","","OutputPdf.html","","<p>This class transforms API qeury data into the PDF files for output.\n"],["OutputXlsx","","OutputXlsx.html","","<p>This class transforms API query data into an XLSX file for output.\n"],["budgets","OutputPdf","OutputPdf.html#method-i-budgets","(budgets_hash = nil)","<p>Sets up project budgets <code>budgets_hash</code> is a hash with project name keys and a float value for each project. …\n"],["change_year","OutputPdf","OutputPdf.html#method-i-change_year","(date = nil)","<p>Sets the end_date to Dec 31 of the year specified. Takes optional <code>date</code> input and skips input prompts. …\n"],["client_id","Clockify","Clockify.html#method-i-client_id","(search)","<p>Retreives the client ID based on <code>search</code> name provided.\n"],["client_list","Clockify","Clockify.html#method-i-client_list","(force: false)","<p>Populates the @clients variable with the JSON API response.\n<p>The option boolean <code>force</code> can be provided to …\n"],["client_names","Clockify","Clockify.html#method-i-client_names","()",""],["current_week","OutputXlsx","OutputXlsx.html#method-i-current_week","()","<p>Returns week number for current range\n"],["current_year","OutputXlsx","OutputXlsx.html#method-i-current_year","()","<p>Returns the year for the current range\n"],["custom_range","OutputXlsx","OutputXlsx.html#method-i-custom_range","(date = nil)","<p>Get input to generate custom week range Takes optional <code>date</code> parameter, abd skips input prompts.\n"],["default_range","OutputXlsx","OutputXlsx.html#method-i-default_range","()","<p>Generate date range based on last Sunday\n"],["detailed_report","Clockify","Clockify.html#method-i-detailed_report","(start_date, end_date)","<p>Creates a detailed report for the current @active_client based on the date range provided.\n<p><code>start_date</code> …\n"],["get_days","Days","Days.html#method-c-get_days","(week, year)","<p>Provides the start and end dates for a given <code>week</code> in the given <code>year</code>\n"],["get_days_from_week","Days","Days.html#method-c-get_days_from_week","(year, month, day)","<p>Provides the week given a date <code>year</code>, <code>month</code> and <code>day</code> should be provided for the target date.\n"],["get_report","OutputPdf","OutputPdf.html#method-i-get_report","()","<p>Queries API for data If current year, report runs from Jan 1 to yesterday. If not current year, report …\n"],["get_report","OutputXlsx","OutputXlsx.html#method-i-get_report","()","<p>Query API for data\n"],["launch","Gui","Gui.html#method-i-launch","()","<p>Launches GUI\n"],["new","Clockify","Clockify.html#method-c-new","()","<p>Creates a new instance of the API and initializes the API key.\n"],["new","Gui","Gui.html#method-c-new","()","<p>Init GUI\n"],["new","OutputPdf","OutputPdf.html#method-c-new","(api)","<p>Initalize all instance variables\n"],["new","OutputXlsx","OutputXlsx.html#method-c-new","(api)","<p>Initialize instance variables\n"],["output","OutputPdf","OutputPdf.html#method-i-output","(base_dir)","<p>Outputs PDF to spec\n"],["output","OutputXlsx","OutputXlsx.html#method-i-output","(base_dir)","<p>Utilize Axlsx to generate output file.\n"],["prior_weekday","Days","Days.html#method-c-prior_weekday","(date, weekday)","<p>Provides the prior <code>weekday</code> based on <code>date</code>.\n<p><code>date</code> is the date object you want to count from <code>weekday</code> is the …\n"],["set_client","Clockify","Clockify.html#method-i-set_client","(input=nil)","<p>Sets the active client for the API instance\n"],["set_client","OutputPdf","OutputPdf.html#method-i-set_client","(client = nil)","<p>Set client via API Takes optional <code>client</code> input\n"],["set_client","OutputXlsx","OutputXlsx.html#method-i-set_client","(client = nil)","<p>Set client via API Takes optional <code>client</code> input\n"],["yesterday","Days","Days.html#method-c-yesterday","()","<p>Provides date for yesterday.\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org”\n<p>gem “wicked_pdf”, “~&gt;  …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  activesupport (7.0.4)\n    concurrent-ruby (~&gt; 1.0, &gt;= 1.0.2) ...</pre>\n"],["README","","README_md.html","","<p>Report Automation\n<p>Ruby 3.0.2\n<p>This repository has classes and a script that make it easy to query for information …\n"],["executable","","executable_md.html","","<p>Executable\n<p>Trying to build an executable that works on both Windows and Linux.\n<p>So far:\n* OCRA doesn&#39;t ...\n"],["history","","history_md.html","","<p>This repository was copied over from github.com/crespire/ds_report_automation\n<p>The repo contains all the …\n"]]}}